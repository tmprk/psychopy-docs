[{"id":0,"href":"/psychopy-docs/docs/programs/line-in-shape-js/","title":"Line-in-shape written in PsychoJS","section":"Docs","content":"Line-in-shape written using PsychoJS #  "},{"id":1,"href":"/psychopy-docs/docs/programs/line-in-shape/","title":"Line-in-shape written using PsychoPy","section":"Docs","content":"Line-in-shape written using PsychoPy #  "},{"id":2,"href":"/psychopy-docs/docs/setup/mac-setup/","title":"macOS Setup","section":"Setup","content":"macOS Specifications #  Here are the specs of my hardware and the version of psychopy I am using:\nModel: Macbook Pro 2015 13-inch Processor: 2.7 GHz Dual-Core Intel Core i5 Memory: 8 GB 1867 MHz DDR3 Graphics: Intel Iris Graphics 6100 1536 MB OS: macOS Big Sur 11.4 Python: Python3.9 PsychoPy: v2021.1.4 Via Homebrew #  Installed GUI version of PsychoPy into my Applications directory using homebrew (or the standalone installer).\n# install Homebrew on macOS /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; # if not already installed brew install python # will install latest version (3.9) automatically # install PsychoPy app brew install --cask psychopy \nThis works well and I\u0026rsquo;m able to open the program:\nSetup for code only #  But I also wanted to be able to prepare for programmatic-only usage instead of only interface+code. I feel like this can be more flexible in some cases where the GUI may not allow for precise customizations.\nMy directory for this summer project looks like this. I created a test directory called playground within programmatic:\n└── psychopy ├── demos ├── graphical └── programmatic └── playground \nIt\u0026rsquo;s a fairly large package and is constantly updated, so installing it globally would not be the best idea; I can change directory into the playground directory, create a virtualenv to install psychopy using pip. This way, the entire psychopy package can be used isolated within that folder only.\ncd psychopy/programmatic virtualenv venv # creates a virtual environment using python 3.9 pip install psychopy # installs psychopy and all its dependencies touch main.py # create main.py file # it should now look like this. └── psychopy ├── demos ├── graphical └── programmatic └── playground ├── venv │\t└── \u0026#34;psychopy source\u0026#34; └── main.py Sample code #  I took the sample code from their \u0026ldquo;scripting only\u0026rdquo; docs and put it into main.py using any text editor:\nfrom psychopy import visual, core # import some libraries from PsychoPy #create a window mywin = visual.Window([800,600], monitor=\u0026#34;testMonitor\u0026#34;, units=\u0026#34;deg\u0026#34;) #create some stimuli grating = visual.GratingStim(win=mywin, mask=\u0026#34;circle\u0026#34;, size=3, pos=[-4,0], sf=3) fixation = visual.GratingStim(win=mywin, size=0.5, pos=[0,0], sf=0, rgb=-1) #draw the stimuli and update the window grating.draw() fixation.draw() mywin.update() #pause, so you get a chance to see it! core.wait(10.0) \nAfter pressing cmd+B to compile it, we should expect to see a window pop up with multiple stimuli and it should close after 10 seconds:\n\nNow that we have everything set up, we should proceed the actual demos and take note of any difficulties and/or successes. The visual search task would be a good start.\nOpen source packages #  I decided to write these logs in markdown as a form of documentation so it can be easy to view updates. I\u0026rsquo;m using Hugo static site generator with a book theme because it is clean and easy to setup for documentation purposes.\n"},{"id":3,"href":"/psychopy-docs/docs/programs/visual-search/","title":"Visual Search example","section":"Docs","content":"PsychoPy Program of Visual Search (directly from Ch. 9) #  In Psych 499, the end goal was to deploy and pilot a visual search program using the specifications of *Interpersonal Competitiveness and Improvement in Reaction Time in a Visual Search. Romero et al. 2015. *\nBuilding Experiments in PsychoPy is a friendly introduction to exploring the PsychoPy user interface and learning how to use the tools it provides. Chapter 9 of this provides a step-by-step tutorial for a generic visual search using mouse as input. This was a good starting point for developing our own visual search program.\nMany of these instructions may be redundant after looking through Chapter 9 of the book, but it provides an updated set of instructions and will attempt to elaborate more on the flow of a psychopy program in lay terms.\nGetting around PsychoPy #  The flow of an experiment is made up of a sequence of Routines, which are made of Components. Here is an example of the final product of Chapter 9\u0026rsquo;s example:\nInstruct, ITI, and trial are each routines. Think of them as individual sets of procedures that can be placed in an order or executed multiple times in experiment using loops. The reason why these are isolated is because each has their own sets of components that are added sequentially (see image below). The instruct routine is shown below and contains 3 components that are initialized in a specific order and last for a designated duration:\nBuilding the visual search example #  Here are the conditions of the experiment. This is served to the the \u0026ldquo;trials\u0026rdquo; loop that was shown earlier in the flow diagram. In 1 repetition,\n There will be 16 total runs. The 8 black runs are where all of the targets shown are black, making it harder to find the distinguish the hexagon from the pentagon distractors. In the 8 red runs, the target is red while the distractors are black. There is a different number distractors for each run, and all will occur only ONCE, unless the n reps is greater than 1.  Displaying the targets #  To display the targets, a trial routine must be created. This is where the targets and mouse input are created.\n A mouse component is created first to be able to watch for any mouse clicks. It ensures that the only clickable stimuli is the target, which can be enabled in mouse properties. The target is essentially a shape stimulus like the other distractors but is a black/red hexagon.  A code object is created, which contains the randomized coordinates of each distractor.  # initialized at the start of the entire experiment x_pos = [-250, -150, -75, -25, 0, 25, 75, 150, 250] y_pos = [-200, -150, -100, -50, 0, 50, 100, 150, 200] # initialized at the start of the trial routine, before the objects are displayed shuffle(x_pos) shuffle(y_pos) distract_1-8 are all shape components that will be created and sent to the screen according to an x_pos and y_pos that was shuffled above. But only a few will be visible because the opacity is set to 0 for some of them.  These are set to pentagons (x, y) position is x_pos[0-8], y_pos[0-8]. Side note: This is obviously not an efficient approach, as it creates more resources at a time than needed. This can be circumvented by using the PsychoPy framework to write the same program from scratch.   This is what it the final result looks like.  Finally, when the program is run, targets will appear on a screen, and the time it takes to identify the hexagon in a pool of pentagon distractors will be recorded when the mouse clicks on a \u0026ldquo;clickable stimuli\u0026rdquo;. When the program has finished running, a CSV file will be generated containing the necessary data. The desired result looks like this:\n   Hexagonal target is red Hexagonal target is black          Link to the working program #  Here is the link to a working program. Simply download the folder and open the .psyexp file, which will prompt the PsychoPy builder to open.\nOnce opened, click the green play button at the top of the window. The experiment will start in full screen.\n"},{"id":4,"href":"/psychopy-docs/docs/setup/windows-setup/","title":"Windows Setup","section":"Setup","content":"Windows Specifications #  The background of my hardware specifications with the version of Python and PsychoPy I am using are shown below:\nEdition: Windows 10 Pro Processor: Intel(R) Core(TM) i3-2100 CPU @ 3.10GHz 3.10GHz Installed RAM: 4.00 GB System Type: 64-bit operating system, x64-based processor OS Build: 19041.1052 Python: Python 3.9 64-bit PsychoPy: v2021.2.0 Method 1. Install Standalone executable #  The first way to install PsychoPy is by using .exe file. Navigate to their github repository and find StandalonePsychoPy-2021.2.0.1-win64.exe\nOpen the PsychoPy app in your applications and it should open the PsychoPy builder.\nMethod 2. Install Python and Pip #  The second way to utilize psychopy is via the pip package. First check if pip is installed on your computer. You can do this using:\npip --version If it isn\u0026rsquo;t installed, you should go to python.org and select the latest installer for python 3.9. My windows installation came with python 3.6.6 but not pip, so this might be the case for you. The site will auto-detect the OS of your machine so just select download. At the time of this post, the latest is Python 3.9.6. The installer will be an exe.\nWhen you first run it, make sure to check Add Python 3.9 to PATH. This will add py to your environment variables so you can use the latest version of python in the command prompt.\n2.1 Run in command prompt #  Once the setup is complete, you can ensure the latest version of python is running by typing python, pip --version or pip helpin a new instance of your command prompt:\nIf running python still gives you the pre-installed version of python (3.6.6 in this case), you can try running py. It should now show 3.9.6.\n2.2 pip install PsychoPy #  Now that you have the latest version of python and pip on your computer, you can install psychopy using pip.\n Install PsychoPy via pip through cmd by typing pip install psychopy  This will install psychopy as a global package. After running pip list, you will see wheel, setuptools, and psychopy (and psychopy\u0026rsquo;s dependencies) listed out.   Create your designated project folder.  Navigate to that folder, right-click \u0026gt; new \u0026gt; folder   While in the command prompt, use cd to change directory to the folder you created.  When you first open command prompt, you will be in your root directory.  If you created the folder in your Desktop, then type: cd Desktop/{Folder Name} Run ECHO \u0026gt;\u0026gt; main.py, which will create an empty python file called \u0026lsquo;main.py\u0026rsquo;.      Open main.py using any text editor of your choosing. Insert this code snippet (from the official docs) like we did in the macOS setup.  from psychopy import visual, core, event #import some libraries from PsychoPy #create a window mywin = visual.Window([800,600],monitor=\u0026#34;testMonitor\u0026#34;, units=\u0026#34;deg\u0026#34;) #create some stimuli grating = visual.GratingStim(win=mywin, mask=\u0026#39;circle\u0026#39;, size=3, pos=[-4,0], sf=3) fixation = visual.GratingStim(win=mywin, size=0.2, pos=[0,0], sf=0, rgb=-1) #draw the stimuli and update the window while True: #this creates a never-ending loop grating.setPhase(0.05, \u0026#39;+\u0026#39;)#advance phase by 0.05 of a cycle grating.draw() fixation.draw() mywin.flip() if len(event.getKeys())\u0026gt;0: break event.clearEvents() #cleanup mywin.close() core.quit() While you\u0026rsquo;re still in the Project directory that you made earlier, you should type in python main.py in the command prompt. It should output a window with some test stimuli. Congrats, it now runs on windows!\n"}]