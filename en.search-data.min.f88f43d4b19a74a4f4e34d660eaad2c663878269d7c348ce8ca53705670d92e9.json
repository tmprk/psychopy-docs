[{"id":0,"href":"/psychopy-docs/docs/programs/line-in-shape-js/","title":"Line-in-shape running on the web (PsychoJS)","section":"Docs","content":"Line-in-shape written using PsychoJS #  Problem #  A Python script that runs psychopy code can only be used on the device it is installed on and cannot be deployed on the web. Even the GUI library that psychopy uses to create a window is specific to desktop computers.\nAs a result, the PsychoPy organization created some scripts to convert a psychopy project to psychojs. Everything would be fine if the program written in the previous section could be converted to javascript and uploaded to pavlovia.\nIt turns out that only experiments made in the PsychoPy Builder, can be converted using a script. Initially, I thought that any code that involves psychopy could be converted to psychoJS and then run on Pavlovia but I was wrong about this.\nSolution #  The Javascript framework, PsychoJS that psychopy is automatically converted to from the builder can be used to write your own programs from scratch.\nAs a result, I decided to just translate the python code to javascript. The main logic was already written, so it just needed to be translated, with a few other nuances. Read manual coding of PsychoJS studies, which described my situation perfectly.\nKey parts of the solution #  PsychoJS library doesn\u0026rsquo;t require any server-side code to display shapes and accept keystrokes, etc. As a result, I decided to dabble in serverless and host the core program on Netlify, utlizing Netlify Functions ✨ for uploading data. In the words of Netlify:\n Deploy server-side code that works as API endpoints, runs automatically in response to events, or processes more complex jobs in the background.\nFunctions receive request context or event data, and return data back to your front end.\n This is perfect because everything up until the CSV upload is local; displaying shapes, keystroke input, trial results, and CSV formatting are all done in javascript on the browser. Once all the this happens, the plan was to call a Netlify function endpoint (passing in the CSV data through the event body) and my function would handle the data and upload it somewhere safe.\nIn addition to the actual program written in PsychoJS, here is a simple Netlify function I used:\n// Grab our credentials from a .env file or environment variables require(\u0026#39;dotenv\u0026#39;).config(); const { DATABASE_URL, SUPABASE_SERVICE_API_KEY } = process.env; // Connect to our database const { createClient } = require(\u0026#39;@supabase/supabase-js\u0026#39;); const supabase = createClient(DATABASE_URL, SUPABASE_SERVICE_API_KEY); // Our standard serverless handler function exports.handler = async event =\u0026gt; { if (event.httpMethod == \u0026#39;POST\u0026#39;) { console.log(typeof(event.body)) console.log(\u0026#39;body:\u0026#39;, event.body, \u0026#39;\\n\u0026#39;) console.log(\u0026#39;filename:\u0026#39;, JSON.parse(event.body).filename, \u0026#39;\\n\u0026#39;) console.log(\u0026#39;contents:\u0026#39;, JSON.parse(event.body).csv, \u0026#39;\\n\u0026#39;) const body = JSON.parse(event.body) const filename = body.filename const contents = body.csv // Insert a row  const { data, error } = await supabase.storage .from(\u0026#39;results\u0026#39;) .upload(filename, contents, { contentType: \u0026#39;text/csv\u0026#39; }) // Did it work?  if (data) { console.log(data); return { statusCode: 200, body: JSON.stringify({ message: \u0026#39;sent a post request containing blob\u0026#39; }), } } else { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: \u0026#34;POST didn\u0026#39;t go through\u0026#34; }), } } } } But how will this Netlify function be called? The psychojs program must call this endpoint (/api/upload-csv) by itself, so I added this snippet to the PsychoJS code. This goes in uploadData(key, value) of ServerManager.js. Towards the end of the experiment when uploadData is executed, the Netlify function should be called.\nconst self = this; const URL = \u0026#39;/api/upload-csv\u0026#39; // Netlify function is located at this endpoint !!! \treturn new Promise((resolve, reject) =\u0026gt; { let type = \u0026#34;text/csv\u0026#34; // \u0026#34;value\u0026#34; is the comma separated value passed into the function  const blob = new Blob([value], { type }); fetch(URL, { method: \u0026#39;post\u0026#39;, // make a post request to the endpoint above  headers: { \u0026#39;Accept\u0026#39;: \u0026#39;application/json, text/plain, */*\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ filename: key, csv: value }) // the data  }).then(res =\u0026gt; res.json()) .then(res =\u0026gt; console.log(res)); }); How to use the program #  I actually have a version deployed right now. It is located on the domain psych dot netlify dot app (doing this to prevent bots). Just navigate to this domain and you can try it out. It will look something like this without the developer tools on the right side, which was for debugging purposes.\n  The program will let you know when the experiment has ended. However, where is the data hosted? As you may have seen earlier in the Netlify function, supabase is used as a datastore. The deployed version will send data to my Supabase bucket. When I navigate to my supabase storage dashboard, I see a list of CSVs that can be downloaded:\nHow to install it on your own #  Great, now you\u0026rsquo;re ready to download the code and make some of your own changes. Before you clone the repository containing the code, there are some prerequisites:\n If you\u0026rsquo;re on mac, brew package manager. If you\u0026rsquo;re on windows move to the next step. Node and npm, for javascript runtime (local server)  For mac users:\nbrew install node node --version # to check if it\u0026#39;s there For windows users: navigate to nodejs.org and get the latest version.\nOpen Terminal on mac, or Command prompt on Windows and download the Netlify dev cli (for testing locally).  # Install the Netlify CLI npm install netlify-cli -g  Once you have all of these, you\u0026rsquo;re now ready to test the core psychojs program and the Netlify functions (these are included in the repository). First clone this this github repository.\ngit clone https://github.com/tmprk/line-in-shape-psychojs/tree/serverless cd line-in-shape-psychojs # change directory to the code ls # list contents of directory # this should be what it looks like └── psychopy ├── functions ├── library ├── scripts ├── index.html ├── netlify.toml ├── package.json ├── stimulus.js ├── visual-search-legacy-browsers.js └── visual-search.js If you try to run netlify dev or any local server to test out your program, it will not work, as many of the essential javascript dependencies are missing. The code you cloned does not include these dependences (because they take up space) but keeps a list of them in package.json. Run npm install in the root of the project. You should now see node_modules, which are used by the program.\nNext, run the Netlify dev tools in the root of the project\nnetlify dev # it should output something like this ◈ Netlify Dev ◈ ◈ Ignored build settings env var: DATABASE_URL (defined in .env file) ◈ Injected .env file env var: DATABASE_URL ◈ Ignored build settings env var: SUPABASE_SERVICE_API_KEY (defined in .env file) ◈ Injected .env file env var: SUPABASE_SERVICE_API_KEY ◈ Ignored general context env var: LANG (defined in process) ◈ Ignored general context env var: LC_ALL (defined in process) ◈ No app server detected. Using simple static server ◈ Unable to determine public folder to serve files from. Using current working directory ◈ Setup a netlify.toml file with a [dev] section to specify your dev server settings. ◈ See docs at: https://cli.netlify.com/netlify-dev#project-detection ◈ Running static server from \u0026#34;line-in-shape\u0026#34; ◈ Loaded function upload-csv. ◈ Functions server is listening on 52182 ◈ Static server listening to 3999 Navigate to http://localhost:3999, or replace 3999 with whatever the output says the static server is running on. You should now see the PsychoJS program! One problem, when you finish the experiment and the program tries to upload, it is unable to because no API keys are provided. To do this, you need your own supabase account and create a bucket to hold the CSVs. This next part should help accomplish that.\nCollecting CSV data (and self-hosting methods) #  To get a datastore yourself or your own organization, there are many options. You can you Amazon AWS, MongoDB, Fauna DB, the list goes on. I just chose supabase because I was having issues getting AWS Dynamo DB to work. First, sign up with Supabase using the third-party Github login. On your supabase dashboard, click \u0026ldquo;New Project\u0026rdquo; and name it accordingly.\nAfter creating a project, a storage bucket must be created. Go to the storage icon on the left navigation bar, and click \u0026ldquo;Create a new bucket\u0026rdquo;\nNow that these things are created, we need to retrieve the database URL, API keys and access token. The database URL is an individual identifier for your project, and the API keys and access token are secret key that can be used to interact with the database (read and write data) and are used in the code. To get these things, look for the settings icon on the left. Click the icon \u0026gt; click API. You should see various fields that can be copied.\nThe top one (3) is the API key. The bottom one (4) is the database URL. These will both need to be added to your code so you can send the data to your own instance. To do this, create an .env file in the root of your project. This is an environment file and contains keys that should not be exposed to the public. Once you place these in the .env file, they will be read by the netlify function, so that it can run the code that uploads the CSV.\n# in root of project in terminal touch .env nano .env # or open in your text editor # paste these using nano, or in editor DATABASE_URL={the data base URL you copied} SUPABASE_SERVICE_API_KEY={your api key} Let Netlify read your Github repo #  Now that you have it running locally, it should also be able to upload the CSVs to your supabase bucket as well. To get this deployed on netlify (for now, since we\u0026rsquo;re using netlify functions), you will have to first push the code to Github. After adding your API keys to the .env file, the code is now ready for upload.\nCreate a new Github repo on the website. Name it whatever you like. It lists out several ways to get your code onto the empty repo. What you\u0026rsquo;re interested in is the bottom section.\n# since you cloned the repo, you need a *new* remote url to push to # in the root of the project git remote set-url origin git@github.com{your-username}/{repo name}.git git branch -M main git push -u origin main Now you have to sign up with Netlify. They have a generous free tier of 125,000 requests per month, plenty of bandwidth for your site, and build minutes. Once you sign up, there will be a button that says \u0026ldquo;new site from git\u0026rdquo;. It will direct you to several options to authenticate with, so Netlify can read only the github repos you permit.\n   new site from git connect repo          Once you select the repo that you gave Netlify access to, it will start building the site. It creates a build environment to set everything up. If everything goes to plan, the build should have succeeded. It should provide you a URL, which can be renamed in the site settings.\nYou can now access this site from anywhere in the world! If you\u0026rsquo;ve made it this far, then congratulations.\nMoving forward #  If there are any suggestions, improvements, or issues encountered along the way, feel free to reach out via email.\nSome things I would like to add to this (tentative list):\n Authentication via code given by research coordinator  With the domain in the public, anyone can access and the program may be prone to bots and DOS\u0026rsquo;ing (highly unlikely for something so niche but could happen). Since it\u0026rsquo;s static, we can\u0026rsquo;t perform authentication so we would have to resort to Netlify functions again. Entirely possible though.    "},{"id":1,"href":"/psychopy-docs/docs/programs/line-in-shape/","title":"Line-in-shape written using PsychoPy","section":"Docs","content":"Line-in-shape written using PsychoPy programmatically #  The requirements for a visual search line-in-shape task were a little more demanding than the chapter 9 example.\nFor example, the number of shapes is not predetermined (from an array of coordinates) as it was in the previous example. Instead of creating 1-8 distractors and placing them in random locations, the line-in-shape program requires anywhere from 8 to 20 shapes that are oriented in a circle.\nTo display the stimuli in a circle, the positions must be calculated. This, however, depends on the number of stimuli which is determined randomly. In addition to determining the location of the stimuli and target based on the number of shapes, some trials have distractors and some do not. The lines are inside each of the stimuli must also be either 22.5 degrees from horizontal or vertical.\nSome dilemmas #  The first problem that arises when trying to make this in builder interface would be: Should I make 20 components despite only having 8 or 12 for some trials? Setting the opacity to 0 for the unused one may work, but that means the coordinates of all the shapes must be stored in a conditions file and each of the possibilities must be enumerated in the csv. Another problem would be having to manually add the shape and line components (over 40) and setting the properties for each. This seemed very tedious and could be resolved using a simple for loop in code (the book also mentions this).\nNext, onto the official guidelines.\nGuidelines #  In each trial, there must be either 8, 12, 16, or 20 stimuli (this is randomly chosen). One of these stimuli will randomly be the target and the remaining stimuli will be circles. The rest of the stimuli will be circles. There will be lines in each of the shapes. For the non-targets, the line will be oriented either +22.5 or -22.5 degrees from horizontal or vertical. The line in the target will be either horizontal or vertical only.\nThe task at hand is to identify the target (square) and respond with the correct orientation of the line inside the square.\nThere are 3 main conditions:\n No distractor present. All of the stimuli are colored green, and the randomly chosen target will be a square instead of a circle. Distractor is present, and the line in the target and the distractor are matching (they are oriented the same way). All of the stimuli are red, the distractor is green, and the square target is one of the red. Distractor is present, and the line in the target and the distractor are not matching (one will be horizontal, the other vertical). Once again, all of the stimuli are red, the distractor is green, and the square target is one of the red.  For now, keypresses are used to respond to the orientation of the line in the target. Z is horizontal and M is vertical.\nThe number of trials can be set to any number, and the program will create a distribution of trials such that half are condition 1 (no distractor), 25% are condition 2 (distractor matching), and the remaining 25% is condition 3 (distractor mismatch).\nResponse time will be measured in each of the trials and the output will be a CSV file.\nHow to run this program #   At this point, there should already be a copy of python and the psychopy python framework on your device. If not, you can navigate to the Mac setup or Windows setup. Next, grab a copy of the program from github.  git clone https://github.com/tmprk/psychopy-visual-search cd psychopy-visual-search python main.py After this, it should prompt you to enter your name and gender.\nOnce you select okay, the you will be met with an instruction screen. It is pretty bare right now, as the main functionality was prioritized. Possible things to add are a demo of what is to be expected, and what the participant should press.\nThe trials will begin, and you will encounter each of these. Click the tabs to see an example of each.\nNo Distractor Distractor matching Distractor mismatching  "},{"id":2,"href":"/psychopy-docs/docs/setup/mac-setup/","title":"macOS Setup","section":"Setup","content":"macOS Specifications #  Here are the specs of my hardware and the version of psychopy I am using:\nModel: Macbook Pro 2015 13-inch Processor: 2.7 GHz Dual-Core Intel Core i5 Memory: 8 GB 1867 MHz DDR3 Graphics: Intel Iris Graphics 6100 1536 MB OS: macOS Big Sur 11.4 Python: Python3.9 PsychoPy: v2021.1.4 Via Homebrew #  Installed GUI version of PsychoPy into my Applications directory using homebrew (or the standalone installer).\n# install Homebrew on macOS /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; # if not already installed brew install python # will install latest version (3.9) automatically # install PsychoPy app brew install --cask psychopy \nThis works well and I\u0026rsquo;m able to open the program:\nSetup for code only #  But I also wanted to be able to prepare for programmatic-only usage instead of only interface+code. I feel like this can be more flexible in some cases where the GUI may not allow for precise customizations.\nMy directory for this summer project looks like this. I created a test directory called playground within programmatic:\n└── psychopy ├── demos ├── graphical └── programmatic └── playground \nIt\u0026rsquo;s a fairly large package and is constantly updated, so installing it globally would not be the best idea; I can change directory into the playground directory, create a virtualenv to install psychopy using pip. This way, the entire psychopy package can be used isolated within that folder only.\ncd psychopy/programmatic virtualenv venv # creates a virtual environment using python 3.9 pip install psychopy # installs psychopy and all its dependencies touch main.py # create main.py file # it should now look like this. └── psychopy ├── demos ├── graphical └── programmatic └── playground ├── venv │\t└── \u0026#34;psychopy source\u0026#34; └── main.py Sample code #  I took the sample code from their \u0026ldquo;scripting only\u0026rdquo; docs and put it into main.py using any text editor:\nfrom psychopy import visual, core # import some libraries from PsychoPy #create a window mywin = visual.Window([800,600], monitor=\u0026#34;testMonitor\u0026#34;, units=\u0026#34;deg\u0026#34;) #create some stimuli grating = visual.GratingStim(win=mywin, mask=\u0026#34;circle\u0026#34;, size=3, pos=[-4,0], sf=3) fixation = visual.GratingStim(win=mywin, size=0.5, pos=[0,0], sf=0, rgb=-1) #draw the stimuli and update the window grating.draw() fixation.draw() mywin.update() #pause, so you get a chance to see it! core.wait(10.0) \nAfter pressing cmd+B to compile it, we should expect to see a window pop up with multiple stimuli and it should close after 10 seconds:\n\nNow that we have everything set up, we should proceed the actual demos and take note of any difficulties and/or successes. The visual search task would be a good start.\nOpen source packages #  I decided to write these logs in markdown as a form of documentation so it can be easy to view updates. I\u0026rsquo;m using Hugo static site generator with a book theme because it is clean and easy to setup for documentation purposes.\n"},{"id":3,"href":"/psychopy-docs/docs/programs/visual-search/","title":"Visual Search example","section":"Docs","content":"PsychoPy Program of Visual Search (directly from Ch. 9) #  In Psych 499, the end goal was to deploy and pilot a visual search program using the specifications of\n Interpersonal Competitiveness and Improvement in Reaction Time in a Visual Search. Romero et al. 2015.\n The book, Building Experiments in PsychoPy, is a friendly introduction to exploring the PsychoPy user interface and learning how to use the tools it provides. Chapter 9 of this provides a step-by-step tutorial for a generic visual search using mouse as input. This was a good starting point for developing our own visual search program.\nMany of these instructions may be redundant after looking through Chapter 9 of the book, but it provides an updated set of instructions and will attempt to elaborate more on the flow of a psychopy program in lay terms.\nGetting around PsychoPy #  The flow of an experiment is made up of a sequence of Routines, which are made of Components. Here is an example of the final product of Chapter 9\u0026rsquo;s example:\nInstruct, ITI, and trial are each routines. Think of them as individual sets of procedures that can be placed in an order or executed multiple times in experiment using loops. The reason why these are isolated is because each has their own sets of components that are added sequentially (see image below). The instruct routine is shown below and contains 3 components that are initialized in a specific order and last for a designated duration:\nBuilding the visual search example #  Here are the conditions of the experiment. This is served to the the \u0026ldquo;trials\u0026rdquo; loop that was shown earlier in the flow diagram. In 1 repetition,\n There will be 16 total runs. The 8 black runs are where all of the targets shown are black, making it harder to find the distinguish the hexagon from the pentagon distractors. In the 8 red runs, the target is red while the distractors are black. There is a different number distractors for each run, and all will occur only ONCE, unless the n reps is greater than 1.  Displaying the targets #  To display the targets, a trial routine must be created. This is where the targets and mouse input are created.\n A mouse component is created first to be able to watch for any mouse clicks. It ensures that the only clickable stimuli is the target, which can be enabled in mouse properties. The target is essentially a shape stimulus like the other distractors but is a black/red hexagon.  A code object is created, which contains the randomized coordinates of each distractor.  # initialized at the start of the entire experiment x_pos = [-250, -150, -75, -25, 0, 25, 75, 150, 250] y_pos = [-200, -150, -100, -50, 0, 50, 100, 150, 200] # initialized at the start of the trial routine, before the objects are displayed shuffle(x_pos) shuffle(y_pos) distract_1-8 are all shape components that will be created and sent to the screen according to an x_pos and y_pos that was shuffled above. But only a few will be visible because the opacity is set to 0 for some of them.  These are set to pentagons (x, y) position is x_pos[0-8], y_pos[0-8]. Side note: This is obviously not an efficient approach, as it creates more resources at a time than needed. This can be circumvented by using the PsychoPy framework to write the same program from scratch.   This is what it the final result looks like.  Finally, when the program is run, targets will appear on a screen, and the time it takes to identify the hexagon in a pool of pentagon distractors will be recorded when the mouse clicks on a \u0026ldquo;clickable stimuli\u0026rdquo;. When the program has finished running, a CSV file will be generated containing the necessary data. The desired result looks like this:\n   Hexagonal target is red Hexagonal target is black          Link to the working program #  Here is the link to a working program. Simply download the folder and open the .psyexp file, which will prompt the PsychoPy builder to open.\nOnce opened, click the green play button at the top of the window. The experiment will start in full screen.\n"},{"id":4,"href":"/psychopy-docs/docs/setup/windows-setup/","title":"Windows Setup","section":"Setup","content":"Windows Specifications #  The background of my hardware specifications with the version of Python and PsychoPy I am using are shown below:\nEdition: Windows 10 Pro Processor: Intel(R) Core(TM) i3-2100 CPU @ 3.10GHz 3.10GHz Installed RAM: 4.00 GB System Type: 64-bit operating system, x64-based processor OS Build: 19041.1052 Python: Python 3.9 64-bit PsychoPy: v2021.2.0 Method 1. Install Standalone executable #  The first way to install PsychoPy is by using .exe file. Navigate to their github repository and find StandalonePsychoPy-2021.2.0.1-win64.exe\nOpen the PsychoPy app in your applications and it should open the PsychoPy builder.\nMethod 2. Install Python and Pip #  The second way to utilize psychopy is via the pip package. First check if pip is installed on your computer. You can do this using:\npip --version If it isn\u0026rsquo;t installed, you should go to python.org and select the latest installer for python 3.9. My windows installation came with python 3.6.6 but not pip, so this might be the case for you. The site will auto-detect the OS of your machine so just select download. At the time of this post, the latest is Python 3.9.6. The installer will be an exe.\nWhen you first run it, make sure to check Add Python 3.9 to PATH. This will add py to your environment variables so you can use the latest version of python in the command prompt.\n2.1 Run in command prompt #  Once the setup is complete, you can ensure the latest version of python is running by typing python, pip --version or pip helpin a new instance of your command prompt:\nIf running python still gives you the pre-installed version of python (3.6.6 in this case), you can try running py. It should now show 3.9.6.\n2.2 pip install PsychoPy #  Now that you have the latest version of python and pip on your computer, you can install psychopy using pip.\n Install PsychoPy via pip through cmd by typing pip install psychopy  This will install psychopy as a global package. After running pip list, you will see wheel, setuptools, and psychopy (and psychopy\u0026rsquo;s dependencies) listed out.   Create your designated project folder.  Navigate to that folder, right-click \u0026gt; new \u0026gt; folder   While in the command prompt, use cd to change directory to the folder you created.  When you first open command prompt, you will be in your root directory.  If you created the folder in your Desktop, then type: cd Desktop/{Folder Name} Run ECHO \u0026gt;\u0026gt; main.py, which will create an empty python file called \u0026lsquo;main.py\u0026rsquo;.      Open main.py using any text editor of your choosing. Insert this code snippet (from the official docs) like we did in the macOS setup.  from psychopy import visual, core, event #import some libraries from PsychoPy #create a window mywin = visual.Window([800,600],monitor=\u0026#34;testMonitor\u0026#34;, units=\u0026#34;deg\u0026#34;) #create some stimuli grating = visual.GratingStim(win=mywin, mask=\u0026#39;circle\u0026#39;, size=3, pos=[-4,0], sf=3) fixation = visual.GratingStim(win=mywin, size=0.2, pos=[0,0], sf=0, rgb=-1) #draw the stimuli and update the window while True: #this creates a never-ending loop grating.setPhase(0.05, \u0026#39;+\u0026#39;)#advance phase by 0.05 of a cycle grating.draw() fixation.draw() mywin.flip() if len(event.getKeys())\u0026gt;0: break event.clearEvents() #cleanup mywin.close() core.quit() While you\u0026rsquo;re still in the Project directory that you made earlier, you should type in python main.py in the command prompt. It should output a window with some test stimuli. Congrats, it now runs on windows!\n"}]